#include "pch.h"
#include "Lock.h"
#include "CoreTLS.h"
#include "DeadLockProfiler.h"

void Lock::WriteLock(const char* name)
{
#if _DEBUG
	GDeadLockProfiler->PushLock(name);
#endif

	// 동일한 쓰레드가 락을 소유하고 있다면 무조건 성공!
	// 아무도 소유 및 공유하고 있지 않을 때 , 경합해서 소유권을 얻는다.
	const uint32 lockThreadId = (_lockFlag.load() & WRITE_THREAD_MASK >> 16);

	if (LThreadId == lockThreadId)
	{
		_wirteCount++;
		return;
	}

	const int64 beginTick = ::GetTickCount64();
	const uint32 desired = ((LThreadId << 16) & WRITE_THREAD_MASK);
	while (true)
	{
		for (uint32 spinCount = 0; spinCount < MAX_SPIN_COUNT; spinCount++)
		{
			uint32 expected = EMPTY_FLAG;
			if (_lockFlag.compare_exchange_strong(OUT expected, desired))
			{
				_wirteCount++;
				return;
			}
		}

		if (::GetTickCount64() - beginTick >= ACQUIRE_TIMEOUT_TICK)
			CRASH("LOCK_TIMEOUT");
		this_thread::yield();
	}


}

void Lock::WriteUnLock(const char* name)
{
#if _DEBUG
	GDeadLockProfiler->PopLock(name);
#endif
	//ReadLock 다 풀기 전에는 WriteUnLock은 불가능.
	if ((_lockFlag.load() & READ_COUNT_MASK) != 0)
		CRASH("INVALID_UNLCOK_ORDER");

	const int32 lockCount = --_wirteCount;
	if (lockCount == 0)
	{
		_lockFlag.store(EMPTY_FLAG);
	}
}

void Lock::ReadLock(const char* name)
{
#if _DEBUG
	GDeadLockProfiler->PushLock(name);
#endif
	//동일한 쓰레드가 소유하고 있다면 무조건 성공
	const uint32 lockThreadId = (_lockFlag.load() & WRITE_THREAD_MASK >> 16);

	if (LThreadId == lockThreadId)
	{
		_lockFlag.fetch_add(1);
		return;
	}

	// 아무도 락을 소유 하고 있지 않을 때 경합해서 공유 카운트를 올린다.

	const int64 beginTick = ::GetTickCount64();
	while (true)
	{
		for (int spinCount = 0; spinCount < MAX_SPIN_COUNT; spinCount++)
		{
			//[WWWWWWWW] [WWWWWWWW] Write_Count_MASK를 0으로 쫙 밀어주는 BitFlag 진행
			uint32 expected = (_lockFlag.load() & READ_COUNT_MASK);

			// 1. 이미 다른 쓰레드에서 Wirte를 잡고 있다.
			// 2. 지금 이사이에 누군가 새치기를 해서 먼저 코드를 실행했다.
			if (_lockFlag.compare_exchange_strong(expected, expected + 1))
				return;
		}

		if (::GetTickCount64() - beginTick >= ACQUIRE_TIMEOUT_TICK)
			CRASH("LOCK_TIMEOUT");

		this_thread::yield();
	}
}

void Lock::ReadUnLock(const char* name)
{
#if _DEBUG
	GDeadLockProfiler->PopLock(name);
#endif

	if ((_lockFlag.fetch_sub(1) & READ_COUNT_MASK) == 0)
		CRASH("MULTIPLE_UNLOCK");
}
